// Protocol
protocol Login {
    var user: String { get set }
    var passwd: String { get set }
    
    func logar (user: String, passwd: String) -> Bool
}

// Classe
class Pessoa {
  var nome: String
  var idade: Int?
  var id: Int

  
  // Variável Estática
  //static var texto: String = "Variável estática"
  
  init () {
	self.nome = ""
	self.id = 0
  }
  
  init(id: Int, nome: String, idade: Int) {
    self.nome = nome
    self.idade = idade
    self.id = id
  }
  
  func testeOverload () {
      print("Testando Overload")
  }
  
  // Modificador Final
  //final func toString () -> String {
  func toString () -> String {
      return "[ID: \(self.id), Nome: \(self.nome), Idade: \(self.idade!)]"
  }
}

// Herança
class Funcionario : Pessoa, Login {
  var `class`: String
  var salario: Float
  var user: String
  var passwd: String
  
  init(nome: String, idade: Int, id: Int, class: String, salario: Float, user: String, passwd: String) {
    self.`class` = `class`
    self.salario = salario
    self.user = user
    self.passwd = passwd
    super.init(id: id, nome: nome, idade: idade)
  }
  
  func logar (user: String, passwd: String) -> Bool {
      if user == self.user && passwd == self.passwd {
        return true
      }
      
      else {
        return false
      }
  }
  
  func atualizarSalario (percent: Int) {
      self.salario = self.salario + (self.salario / Float(percent))
  }
  
  // Overload
  func testeOverload (variavel: String) {
      print("Overload testado")
  }
  
  // Override
  override func toString () -> String {
      return "[ID: \(self.id), Nome: \(self.nome), Idade: \(self.idade!), Setor: \(self.`class`), Salário: \(self.salario)]"
  }
}

// Instância
var p: Pessoa = Pessoa(id: 1, nome: "Primeira Pessoa", idade: 20)

print(p.toString() + "\n")

// Polimorfismo
p = Funcionario(nome: "Func 1", idade: 30, id: 2, class: "Vendas", salario: 980.33, user: "f1", passwd: "123456")

print(p.toString() + "\n")

/*
if p is Funcionario {
    print("Comprovando bug no compilador\n")
}
*/

/*
print("Salário antigo: \((p as! Funcionario).salario)")

(p as! Funcionario).atualizarSalario(20)

print("Salário novo: \((p as! Funcionario).salario)\n")

print("Logado: \((p as! Funcionario).logar("f1", passwd: "123456"))") 
*/

// Instância
/*
var f = Funcionario(nome: "Func 2", idade: 25, id: 3, class: "RH", salario: 1680.33, user: "f2", passwd: "654321")

print("Salário antigo: \(f.salario)")
f.atualizarSalario(20)
print("Salário novo: \(f.salario)\n")

print("Logado: \(f.logar("f2", passwd: "654321"))") 
*/

// Overload
/*
f.testeOverload()
f.testeOverload("Parametro")
*/

// Variável Estática
//print(Pessoa.texto)